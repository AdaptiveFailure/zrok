// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// ResetTokenHandlerFunc turns a function with the right signature into a reset token handler
type ResetTokenHandlerFunc func(ResetTokenParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ResetTokenHandlerFunc) Handle(params ResetTokenParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// ResetTokenHandler interface for that can handle valid reset token params
type ResetTokenHandler interface {
	Handle(ResetTokenParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewResetToken creates a new http.Handler for the reset token operation
func NewResetToken(ctx *middleware.Context, handler ResetTokenHandler) *ResetToken {
	return &ResetToken{Context: ctx, Handler: handler}
}

/*
	ResetToken swagger:route POST /resetToken account resetToken

ResetToken reset token API
*/
type ResetToken struct {
	Context *middleware.Context
	Handler ResetTokenHandler
}

func (o *ResetToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewResetTokenParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ResetTokenBody reset token body
//
// swagger:model ResetTokenBody
type ResetTokenBody struct {

	// email address
	EmailAddress string `json:"emailAddress,omitempty"`
}

// Validate validates this reset token body
func (o *ResetTokenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this reset token body based on context it is used
func (o *ResetTokenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ResetTokenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ResetTokenBody) UnmarshalBinary(b []byte) error {
	var res ResetTokenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ResetTokenOKBody reset token o k body
//
// swagger:model ResetTokenOKBody
type ResetTokenOKBody struct {

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this reset token o k body
func (o *ResetTokenOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this reset token o k body based on context it is used
func (o *ResetTokenOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ResetTokenOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ResetTokenOKBody) UnmarshalBinary(b []byte) error {
	var res ResetTokenOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
