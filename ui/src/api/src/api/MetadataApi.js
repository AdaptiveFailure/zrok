/**
 * zrok
 * zrok client access
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Configuration from '../model/Configuration';
import Environment from '../model/Environment';
import EnvironmentAndResources from '../model/EnvironmentAndResources';
import Frontend from '../model/Frontend';
import Metrics from '../model/Metrics';
import Overview from '../model/Overview';
import Share from '../model/Share';

/**
* Metadata service.
* @module api/MetadataApi
* @version 0.3.0
*/
export default class MetadataApi {

    /**
    * Constructs a new MetadataApi. 
    * @alias module:api/MetadataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Configuration} and HTTP response
     */
    configurationWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = Configuration;
      return this.apiClient.callApi(
        '/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Configuration}
     */
    configuration() {
      return this.configurationWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Environment>} and HTTP response
     */
    getAccountDetailWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['key'];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = [Environment];
      return this.apiClient.callApi(
        '/detail/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Environment>}
     */
    getAccountDetail() {
      return this.getAccountDetailWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {String} [duration] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Metrics} and HTTP response
     */
    getAccountMetricsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'duration': opts['duration']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['key'];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/metrics/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.duration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Metrics}
     */
    getAccountMetrics(opts) {
      return this.getAccountMetricsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} envZId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EnvironmentAndResources} and HTTP response
     */
    getEnvironmentDetailWithHttpInfo(envZId) {
      let postBody = null;
      // verify the required parameter 'envZId' is set
      if (envZId === undefined || envZId === null) {
        throw new Error("Missing the required parameter 'envZId' when calling getEnvironmentDetail");
      }

      let pathParams = {
        'envZId': envZId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['key'];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = EnvironmentAndResources;
      return this.apiClient.callApi(
        '/detail/environment/{envZId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} envZId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EnvironmentAndResources}
     */
    getEnvironmentDetail(envZId) {
      return this.getEnvironmentDetailWithHttpInfo(envZId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} envId 
     * @param {Object} opts Optional parameters
     * @param {String} [duration] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Metrics} and HTTP response
     */
    getEnvironmentMetricsWithHttpInfo(envId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'envId' is set
      if (envId === undefined || envId === null) {
        throw new Error("Missing the required parameter 'envId' when calling getEnvironmentMetrics");
      }

      let pathParams = {
        'envId': envId
      };
      let queryParams = {
        'duration': opts['duration']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['key'];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/metrics/environment/{envId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} envId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.duration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Metrics}
     */
    getEnvironmentMetrics(envId, opts) {
      return this.getEnvironmentMetricsWithHttpInfo(envId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Number} feId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Frontend} and HTTP response
     */
    getFrontendDetailWithHttpInfo(feId) {
      let postBody = null;
      // verify the required parameter 'feId' is set
      if (feId === undefined || feId === null) {
        throw new Error("Missing the required parameter 'feId' when calling getFrontendDetail");
      }

      let pathParams = {
        'feId': feId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['key'];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = Frontend;
      return this.apiClient.callApi(
        '/detail/frontend/{feId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Number} feId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Frontend}
     */
    getFrontendDetail(feId) {
      return this.getFrontendDetailWithHttpInfo(feId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} shrToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Share} and HTTP response
     */
    getShareDetailWithHttpInfo(shrToken) {
      let postBody = null;
      // verify the required parameter 'shrToken' is set
      if (shrToken === undefined || shrToken === null) {
        throw new Error("Missing the required parameter 'shrToken' when calling getShareDetail");
      }

      let pathParams = {
        'shrToken': shrToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['key'];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = Share;
      return this.apiClient.callApi(
        '/detail/share/{shrToken}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} shrToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Share}
     */
    getShareDetail(shrToken) {
      return this.getShareDetailWithHttpInfo(shrToken)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} shrToken 
     * @param {Object} opts Optional parameters
     * @param {String} [duration] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Metrics} and HTTP response
     */
    getShareMetricsWithHttpInfo(shrToken, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shrToken' is set
      if (shrToken === undefined || shrToken === null) {
        throw new Error("Missing the required parameter 'shrToken' when calling getShareMetrics");
      }

      let pathParams = {
        'shrToken': shrToken
      };
      let queryParams = {
        'duration': opts['duration']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['key'];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/metrics/share/{shrToken}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} shrToken 
     * @param {Object} opts Optional parameters
     * @param {String} opts.duration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Metrics}
     */
    getShareMetrics(shrToken, opts) {
      return this.getShareMetricsWithHttpInfo(shrToken, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Overview} and HTTP response
     */
    overviewWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['key'];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = Overview;
      return this.apiClient.callApi(
        '/overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Overview}
     */
    overview() {
      return this.overviewWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    versionWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/zrok.v1+json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    version() {
      return this.versionWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
