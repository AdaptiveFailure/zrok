/**
 * zrok
 * zrok client access
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SparkDataSample from './SparkDataSample';

/**
 * The Environment model module.
 * @module model/Environment
 * @version 0.3.0
 */
class Environment {
    /**
     * Constructs a new <code>Environment</code>.
     * @alias module:model/Environment
     */
    constructor() { 
        
        Environment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Environment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Environment} obj Optional instance to populate.
     * @return {module:model/Environment} The populated <code>Environment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Environment();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('zId')) {
                obj['zId'] = ApiClient.convertToType(data['zId'], 'String');
            }
            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], [SparkDataSample]);
            }
            if (data.hasOwnProperty('limited')) {
                obj['limited'] = ApiClient.convertToType(data['limited'], 'Boolean');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Number');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Environment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Environment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['zId'] && !(typeof data['zId'] === 'string' || data['zId'] instanceof String)) {
            throw new Error("Expected the field `zId` to be a primitive type in the JSON string but got " + data['zId']);
        }
        if (data['activity']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activity'])) {
                throw new Error("Expected the field `activity` to be an array in the JSON data but got " + data['activity']);
            }
            // validate the optional field `activity` (array)
            for (const item of data['activity']) {
                SparkDataSample.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} description
 */
Environment.prototype['description'] = undefined;

/**
 * @member {String} host
 */
Environment.prototype['host'] = undefined;

/**
 * @member {String} address
 */
Environment.prototype['address'] = undefined;

/**
 * @member {String} zId
 */
Environment.prototype['zId'] = undefined;

/**
 * @member {Array.<module:model/SparkDataSample>} activity
 */
Environment.prototype['activity'] = undefined;

/**
 * @member {Boolean} limited
 */
Environment.prototype['limited'] = undefined;

/**
 * @member {Number} createdAt
 */
Environment.prototype['createdAt'] = undefined;

/**
 * @member {Number} updatedAt
 */
Environment.prototype['updatedAt'] = undefined;






export default Environment;

